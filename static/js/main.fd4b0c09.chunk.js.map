{"version":3,"sources":["CustomArgs.js","App.js","serviceWorker.js","index.js","../node_modules/graphql-language-service-interface/dist sync /^.*$"],"names":["unwrapOutputType","outputType","unwrappedType","isWrappingType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","isEnumType","getValues","map","x","includes","GraphiQLExplorer","defaultValue","queryUrl","subscriptionsClient","createClient","url","fetcher","params","_ref","query","operationName","node","parse","operation","getOperationAST","isSubscription","subscribe","_len","arguments","length","args","Array","_key","sink","next","complete","error","getSinkFromArgs","unsubscribe","err","Error","CloseEvent","concat","reason","_ref2","message","join","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","response","text","responseBody","e","DEFAULT_QUERY","App","state","schema","explorerIsOpen","_handleInspectOperation","cm","mousePos","parsedQuery","_this","console","token","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","log","_definition$loc","operationKind","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","setState","_handleToggleExplorer","_this2","this","getIntrospectionQuery","result","editor","_graphiql","getQueryEditor","setOption","Object","objectSpread","options","extraKeys","Shift-Alt-LeftClick","buildClientSchema","data","_this3","_this$state","react_default","a","createElement","className","graphiql_explorer_dist_default","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","dist_default","theme","ref","onEditQuery","Toolbar","Button","onClick","handlePrettifyQuery","label","title","handleToggleHistory","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister",".","./","./GraphQLLanguageService","./GraphQLLanguageService.js","./GraphQLLanguageService.js.flow","./autocompleteUtils","./autocompleteUtils.js","./autocompleteUtils.js.flow","./getAutocompleteSuggestions","./getAutocompleteSuggestions.js","./getAutocompleteSuggestions.js.flow","./getDefinition","./getDefinition.js","./getDefinition.js.flow","./getDiagnostics","./getDiagnostics.js","./getDiagnostics.js.flow","./getHoverInformation","./getHoverInformation.js","./getHoverInformation.js.flow","./getOutline","./getOutline.js","./getOutline.js.flow","./index","./index.js","./index.js.flow","webpackContext","req","id","webpackContextResolve","__webpack_require__","code","keys","resolve","module","exports"],"mappings":"0WAeA,SAASA,EAAiBC,GAExB,IADA,IAAIC,EAAgBD,EACbE,YAAeD,IACpBA,EAAgBA,EAAcE,OAEhC,OAAOF,EAGF,SAASG,EACdC,EACAC,GAEA,IAAML,EAAgBF,EAAiBM,EAAYE,MACnD,SACEN,EAAcO,KAAKC,WAAW,YAC9BR,EAAcO,KAAKE,SAAS,eACd,UAAbJ,EAAIE,MAAiC,YAAbF,EAAIE,MAO1B,SAASG,EACdN,EACAC,EACAM,GAEA,IAAMX,EAAgBF,EAAiBM,EAAYE,MACnD,OAAQN,EAAcO,MACpB,IAAK,mBACH,GAAiB,SAAbF,EAAIE,KACN,MAAO,CAAEK,KAAM,cAAeC,MAAO,cAChC,GAAiB,UAAbR,EAAIE,KACb,MAAO,CAAEK,KAAM,cAAeC,MAAO,WAEvC,MACF,IAAK,aACH,GAAiB,SAAbR,EAAIE,KACN,MAAO,CAAEK,KAAM,cAAeC,MAAO,WAEvC,MACF,QACE,GACEC,YAAWH,IACXX,EAAcO,KAAKC,WAAW,WAC9BR,EAAcO,KAAKE,SAAS,cAC5B,CACA,GACe,cAAbJ,EAAIE,MACJI,EACGI,YACAC,IAAI,SAAAC,GAAC,OAAIA,EAAEV,OACXW,SAAS,QAEZ,MAAO,CAAEN,KAAM,YAAaC,MAAO,QAC9B,GACQ,UAAbR,EAAIE,MACJI,EACGI,YACAC,IAAI,SAAAC,GAAC,OAAIA,EAAEV,OACXW,SAAS,cAEZ,MAAO,CAAEN,KAAM,YAAaC,MAAO,cAGvC,OAAOM,IAAiBC,aAAaT,GAEzC,OAAOQ,IAAiBC,aAAaT,2BCrEjCU,EAAW,qCACXC,EAAsBC,uBAAa,CAAEC,IAAK,qCAoBzC,SAASC,EAAQC,GAEtB,OApBF,SAAAC,GAAiE,IAAvCC,EAAuCD,EAAvCC,MAAOC,EAAgCF,EAAhCE,cACzBC,EAAOC,YAAMH,GACbI,EAAYC,YAAgBH,EAAMD,GACxC,OAAOG,GAAqC,iBAAxBA,EAAUA,UAiB1BE,CAAeR,GACV,CACLS,UAAW,WAAa,QAAAC,EAAAC,UAAAC,OAATC,EAAS,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAATF,EAASE,GAAAJ,UAAAI,GACtB,IAAMC,EAjBd,SAAyBH,GACvB,MAAuB,kBAAZA,EAAK,GACPA,EAAK,GAEP,CACLI,KAAMJ,EAAK,GACXK,SAAUL,EAAK,GACfM,MAAON,EAAK,IAUKO,CAAgBP,GAqB7B,MAAO,CAAEQ,YApBWzB,EAAoBa,UAAUT,EAAQ,CACxDiB,KAAMD,EAAKC,KACXC,SAAUF,EAAKE,SAEfC,MAAO,SAACG,GACFA,aAAeC,MACjBP,EAAKG,MAAMG,GACFA,aAAeE,WACxBR,EAAKG,MACH,IAAII,MACF,KAAAE,OACSH,EAAII,UAKjBV,EAAKG,MAAM,IAAII,MAAMD,EAAIhC,IAAI,SAAAqC,GAAA,OAAAA,EAAGC,UAAuBC,KAAK,cAQ/DC,MAAMnC,EAAU,CACrBoC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUrC,KAEpBsC,KAAK,SAASC,GACb,OAAOA,EAASC,SAEjBF,KAAK,SAASG,GACb,IACE,OAAOL,KAAK/B,MAAMoC,GAClB,MAAOC,GACP,OAAOD,KAMjB,IAAME,EAAa,+eA0GJC,6MAlFbC,MAAQ,CAAEC,OAAQ,KAAM5C,MAAOyC,EAAeI,gBAAgB,KAgB9DC,wBAA0B,SAACC,EAASC,GAClC,IAAMC,EAAc9C,YAAM+C,EAAKP,MAAM3C,OAAS,IAE9C,IAAKiD,EAEH,OADAE,QAAQlC,MAAM,iCACP,KAGT,IAAImC,EAAQL,EAAGM,WAAWL,GACtBM,EAAQ,CAAEC,KAAMP,EAASO,KAAMC,GAAIJ,EAAME,OACzCG,EAAM,CAAEF,KAAMP,EAASO,KAAMC,GAAIJ,EAAMK,KAMvCC,EALmB,CACrBJ,MAAOP,EAAGY,aAAaL,GACvBG,IAAKV,EAAGY,aAAaF,IAKnBG,EAAMX,EAAYY,YAAYC,KAAK,SAACC,GACtC,IAAKA,EAAWC,IAEd,OADAb,QAAQc,IAAI,gDACL,EAH4C,IAAAC,EAM9BH,EAAWC,IAA1BV,EAN6CY,EAM7CZ,MAAOG,EANsCS,EAMtCT,IACf,OAAOH,GAASI,EAASJ,OAASG,GAAOC,EAASD,MAGpD,IAAKG,EAEH,OADAT,QAAQlC,MAAM,6DACP,KAGT,IAAIkD,EAA6B,wBAAbP,EAAI5E,KAAiC4E,EAAIxD,UAAyB,uBAAbwD,EAAI5E,KAAgC,WAAa,UAEtHiB,EAA6B,wBAAb2D,EAAI5E,MAAoC4E,EAAIjF,KAAOiF,EAAIjF,KAAKM,MAAqB,uBAAb2E,EAAI5E,MAAmC4E,EAAIjF,KAAOiF,EAAIjF,KAAKM,MAAQ,UAEvJmF,EAAQ,4BAAA7C,OAA+B4C,EAA/B,KAAA5C,OAAgDtB,GAExDoE,EAAKC,SAASC,cAAcH,GAChCC,GAAMA,EAAGG,oBAGXC,iBAAmB,SAACzE,GAAD,OAAyBkD,EAAKwB,SAAS,CAAE1E,aAE5D2E,sBAAwB,WACtBzB,EAAKwB,SAAS,CAAE7B,gBAAiBK,EAAKP,MAAME,qGA5D1B,IAAA+B,EAAAC,KAClBhF,EAAQ,CACNG,MAAO8E,gBACN1C,KAAK,SAAC2C,GACP,IAAMC,EAASJ,EAAKK,UAAUC,iBAC9BF,EAAOG,UAAU,YAAjBC,OAAAC,EAAA,EAAAD,CAAA,GACMJ,EAAOM,QAAQC,WAAa,GADlC,CAEEC,sBAAuBZ,EAAK9B,2BAG9B8B,EAAKF,SAAS,CAAE9B,OAAQ6C,YAAkBV,EAAOW,2CAqD5C,IAAAC,EAAAd,KAAAe,EACmBf,KAAKlC,MAAvB3C,EADD4F,EACC5F,MAAO4C,EADRgD,EACQhD,OACf,OACEiD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAkBlD,OAAQA,EAAQ5C,MAAOA,EAAOkG,OAAQrB,KAAKJ,iBAAkB0B,eAAgB,SAAClG,GAAD,OAAmB0F,EAAKV,UAAUmB,eAAenG,IAAgB4C,eAAgBgC,KAAKlC,MAAME,eAAgBwD,iBAAkBxB,KAAKF,sBAAuB7F,yBAA0BA,EAA0BP,eAAgBA,IAC7TsH,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAUS,MAAO,OAAQC,IAAK,SAACA,GAAD,OAAUb,EAAKV,UAAYuB,GAAM3G,QAASA,EAAS+C,OAAQA,EAAQ5C,MAAOA,EAAOyG,YAAa5B,KAAKJ,kBAC/HoB,EAAAC,EAAAC,cAACO,EAAAR,EAASY,QAAV,KACEb,EAAAC,EAAAC,cAACO,EAAAR,EAASa,OAAV,CAAiBC,QAAS,kBAAMjB,EAAKV,UAAU4B,uBAAuBC,MAAM,WAAWC,MAAM,kCAC7FlB,EAAAC,EAAAC,cAACO,EAAAR,EAASa,OAAV,CAAiBC,QAAS,kBAAMjB,EAAKV,UAAU+B,uBAAuBF,MAAM,UAAUC,MAAM,iBAC5FlB,EAAAC,EAAAC,cAACO,EAAAR,EAASa,OAAV,CAAiBC,QAAS/B,KAAKF,sBAAuBmC,MAAM,WAAWC,MAAM,8BA5EvEE,aChGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASnD,SAASoD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzF,KAAK,SAAA0F,GACjCA,EAAaC,mCEnInB,IAAA3I,EAAA,CACA4I,IAAA,GACAC,KAAA,GACAC,2BAAA,GACAC,8BAAA,GACAC,mCAAA,IACAC,sBAAA,GACAC,yBAAA,GACAC,8BAAA,IACAC,+BAAA,GACAC,kCAAA,GACAC,uCAAA,IACAC,kBAAA,GACAC,qBAAA,GACAC,0BAAA,IACAC,mBAAA,GACAC,sBAAA,GACAC,2BAAA,IACAC,wBAAA,GACAC,2BAAA,GACAC,gCAAA,IACAC,eAAA,GACAC,kBAAA,GACAC,uBAAA,IACAC,UAAA,GACAC,aAAA,GACAC,kBAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAxK,EAAAuK,GACA,KAAAC,EAAA,IACA,IAAApH,EAAA,IAAAnB,MAAA,uBAAAsI,EAAA,KAEA,MADAnH,EAAAuH,KAAA,mBACAvH,EAEA,OAAAoH,EAEAF,EAAAM,KAAA,WACA,OAAA5E,OAAA4E,KAAA5K,IAEAsK,EAAAO,QAAAJ,EACAK,EAAAC,QAAAT,EACAA,EAAAE,GAAA","file":"static/js/main.fd4b0c09.chunk.js","sourcesContent":["// flow\n\nimport GraphiQLExplorer from \"graphiql-explorer\";\nimport { isEnumType, isWrappingType } from \"graphql\";\n\nimport type {\n  GraphQLField,\n  GraphQLArgument,\n  GraphQLInputField,\n  GraphQLEnumType,\n  GraphQLOutputType,\n  GraphQLScalarType,\n  ValueNode\n} from \"graphql\";\n\nfunction unwrapOutputType(outputType: GraphQLOutputType): * {\n  let unwrappedType = outputType;\n  while (isWrappingType(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType;\n  }\n  return unwrappedType;\n}\n\nexport function makeDefaultArg(\n  parentField: GraphQLField<any, any>,\n  arg: GraphQLArgument | GraphQLInputField\n): boolean {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  if (\n    unwrappedType.name.startsWith(\"GitHub\") &&\n    unwrappedType.name.endsWith(\"Connection\") &&\n    (arg.name === \"first\" || arg.name === \"orderBy\")\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function getDefaultScalarArgValue(\n  parentField: GraphQLField<any, any>,\n  arg: GraphQLArgument | GraphQLInputField,\n  argType: GraphQLEnumType | GraphQLScalarType\n): ValueNode {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  switch (unwrappedType.name) {\n    case \"GitHubRepository\":\n      if (arg.name === \"name\") {\n        return { kind: \"StringValue\", value: \"graphql-js\" };\n      } else if (arg.name === \"owner\") {\n        return { kind: \"StringValue\", value: \"graphql\" };\n      }\n      break;\n    case \"NpmPackage\":\n      if (arg.name === \"name\") {\n        return { kind: \"StringValue\", value: \"graphql\" };\n      }\n      break;\n    default:\n      if (\n        isEnumType(argType) &&\n        unwrappedType.name.startsWith(\"GitHub\") &&\n        unwrappedType.name.endsWith(\"Connection\")\n      ) {\n        if (\n          arg.name === \"direction\" &&\n          argType\n            .getValues()\n            .map(x => x.name)\n            .includes(\"DESC\")\n        ) {\n          return { kind: \"EnumValue\", value: \"DESC\" };\n        } else if (\n          arg.name === \"field\" &&\n          argType\n            .getValues()\n            .map(x => x.name)\n            .includes(\"CREATED_AT\")\n        ) {\n          return { kind: \"EnumValue\", value: \"CREATED_AT\" };\n        }\n      }\n      return GraphiQLExplorer.defaultValue(argType);\n  }\n  return GraphiQLExplorer.defaultValue(argType);\n}\n","// @flow\n\nimport React, { Component } from \"react\";\nimport GraphiQL from \"graphiql\";\nimport GraphiQLExplorer from \"graphiql-explorer\";\nimport { buildClientSchema, getIntrospectionQuery, parse, getOperationAST } from \"graphql\";\nimport { createClient } from \"graphql-ws\";\nimport { makeDefaultArg, getDefaultScalarArgValue } from \"./CustomArgs\";\n\nimport \"graphiql/graphiql.css\";\nimport \"./App.css\";\n\nimport { FetcherParams, FetcherReturnType } from \"graphiql/dist/components/GraphiQL\";\n\nconst queryUrl = \"https://api.tokenql.com/v1/graphql\";\nconst subscriptionsClient = createClient({ url: \"wss://api.tokenql.com/v1/graphql\" });\n\nfunction isSubscription({ query, operationName }: FetcherParams) {\n  const node = parse(query);\n  const operation = getOperationAST(node, operationName);\n  return operation && operation.operation === \"subscription\";\n}\n\nfunction getSinkFromArgs(args: unknown[]) {\n  if (typeof args[0] === \"object\") {\n    return args[0];\n  }\n  return {\n    next: args[0],\n    complete: args[1],\n    error: args[2],\n  };\n}\n\n// plug me in the `fetcher` prop on the GraphiQL component\nexport function fetcher(params) {\n  // https://github.com/enisdenjo/graphql-ws/issues/93#issuecomment-758625106\n  if (isSubscription(params)) {\n    return {\n      subscribe: (...args) => {\n        const sink = getSinkFromArgs(args);\n        const unsubscribe = subscriptionsClient.subscribe(params, {\n          next: sink.next,\n          complete: sink.complete,\n          // Display nice, textual, meaningful errors.\n          error: (err) => {\n            if (err instanceof Error) {\n              sink.error(err);\n            } else if (err instanceof CloseEvent) {\n              sink.error(\n                new Error(\n                  `Socket closed with event ${err.code}` + err.reason\n                    ? `: ${err.reason}` // reason will be available on clean closes\n                    : \"\"\n                )\n              );\n            } else {\n              sink.error(new Error(err.map(({ message }) => message).join(\", \")));\n            }\n          },\n        });\n        return { unsubscribe };\n      },\n    };\n  } else {\n    return fetch(queryUrl, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(params),\n    })\n      .then(function(response) {\n        return response.text();\n      })\n      .then(function(responseBody) {\n        try {\n          return JSON.parse(responseBody);\n        } catch (e) {\n          return responseBody;\n        }\n      });\n  }\n}\n\nconst DEFAULT_QUERY = `\n# curl 'https://api.tokenql.com/v1/graphql' --data-raw '{\"query\":\"query MyQuery { Oasis_Mainnet_ERC20(where: {address: {_eq: \\\\\"0xd06d611dadc3575b77b793c170d819d2ecd7d4de\\\\\"}}) { address balance contract decimals id name symbol } }\",\"variables\":null,\"operationName\":\"MyQuery\"}'\n\nquery MyQuery {\n  Oasis_Mainnet_ERC20(where: {address: {_eq: \"0xd06d611dadc3575b77b793c170d819d2ecd7d4de\"}}) {\n    address\n    balance\n    contract\n    decimals\n    id\n    name\n    symbol\n  }\n}\n`;\n\ntype State = {\n  schema: ?GraphQLSchema,\n  query: string,\n  explorerIsOpen: boolean,\n};\n\nclass App extends Component<{}, State> {\n  _graphiql: GraphiQL;\n  state = { schema: null, query: DEFAULT_QUERY, explorerIsOpen: true };\n\n  componentDidMount() {\n    fetcher({\n      query: getIntrospectionQuery(),\n    }).then((result) => {\n      const editor = this._graphiql.getQueryEditor();\n      editor.setOption(\"extraKeys\", {\n        ...(editor.options.extraKeys || {}),\n        \"Shift-Alt-LeftClick\": this._handleInspectOperation,\n      });\n\n      this.setState({ schema: buildClientSchema(result.data) });\n    });\n  }\n\n  _handleInspectOperation = (cm: any, mousePos: { line: Number, ch: Number }) => {\n    const parsedQuery = parse(this.state.query || \"\");\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\");\n      return null;\n    }\n\n    var token = cm.getTokenAt(mousePos);\n    var start = { line: mousePos.line, ch: token.start };\n    var end = { line: mousePos.line, ch: token.end };\n    var relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end),\n    };\n\n    var position = relevantMousePos;\n\n    var def = parsedQuery.definitions.find((definition) => {\n      if (!definition.loc) {\n        console.log(\"Missing location information for definition\");\n        return false;\n      }\n\n      const { start, end } = definition.loc;\n      return start <= position.start && end >= position.end;\n    });\n\n    if (!def) {\n      console.error(\"Unable to find definition corresponding to mouse position\");\n      return null;\n    }\n\n    var operationKind = def.kind === \"OperationDefinition\" ? def.operation : def.kind === \"FragmentDefinition\" ? \"fragment\" : \"unknown\";\n\n    var operationName = def.kind === \"OperationDefinition\" && !!def.name ? def.name.value : def.kind === \"FragmentDefinition\" && !!def.name ? def.name.value : \"unknown\";\n\n    var selector = `.graphiql-explorer-root #${operationKind}-${operationName}`;\n\n    var el = document.querySelector(selector);\n    el && el.scrollIntoView();\n  };\n\n  _handleEditQuery = (query: string): void => this.setState({ query });\n\n  _handleToggleExplorer = () => {\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen });\n  };\n\n  render() {\n    const { query, schema } = this.state;\n    return (\n      <div className=\"graphiql-container\">\n        <GraphiQLExplorer schema={schema} query={query} onEdit={this._handleEditQuery} onRunOperation={(operationName) => this._graphiql.handleRunQuery(operationName)} explorerIsOpen={this.state.explorerIsOpen} onToggleExplorer={this._handleToggleExplorer} getDefaultScalarArgValue={getDefaultScalarArgValue} makeDefaultArg={makeDefaultArg} />\n        <GraphiQL theme={'dark'} ref={(ref) => (this._graphiql = ref)} fetcher={fetcher} schema={schema} query={query} onEditQuery={this._handleEditQuery}>\n          <GraphiQL.Toolbar>\n            <GraphiQL.Button onClick={() => this._graphiql.handlePrettifyQuery()} label=\"Prettify\" title=\"Prettify Query (Shift-Ctrl-P)\" />\n            <GraphiQL.Button onClick={() => this._graphiql.handleToggleHistory()} label=\"History\" title=\"Show History\" />\n            <GraphiQL.Button onClick={this._handleToggleExplorer} label=\"Explorer\" title=\"Toggle Explorer\" />\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\".\": 35,\n\t\"./\": 35,\n\t\"./GraphQLLanguageService\": 72,\n\t\"./GraphQLLanguageService.js\": 72,\n\t\"./GraphQLLanguageService.js.flow\": 195,\n\t\"./autocompleteUtils\": 52,\n\t\"./autocompleteUtils.js\": 52,\n\t\"./autocompleteUtils.js.flow\": 196,\n\t\"./getAutocompleteSuggestions\": 44,\n\t\"./getAutocompleteSuggestions.js\": 44,\n\t\"./getAutocompleteSuggestions.js.flow\": 197,\n\t\"./getDefinition\": 53,\n\t\"./getDefinition.js\": 53,\n\t\"./getDefinition.js.flow\": 198,\n\t\"./getDiagnostics\": 55,\n\t\"./getDiagnostics.js\": 55,\n\t\"./getDiagnostics.js.flow\": 199,\n\t\"./getHoverInformation\": 56,\n\t\"./getHoverInformation.js\": 56,\n\t\"./getHoverInformation.js.flow\": 200,\n\t\"./getOutline\": 71,\n\t\"./getOutline.js\": 71,\n\t\"./getOutline.js.flow\": 201,\n\t\"./index\": 35,\n\t\"./index.js\": 35,\n\t\"./index.js.flow\": 202\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 98;"],"sourceRoot":""}